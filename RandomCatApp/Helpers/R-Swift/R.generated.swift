//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle
  var color: color { .init(bundle: bundle) }
  var info: info { .init(bundle: bundle) }
  var file: file { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func info(bundle: Foundation.Bundle) -> info {
    .init(bundle: bundle)
  }
  func file(bundle: Foundation.Bundle) -> file {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `AccentColor`.
    var accentColor: RswiftResources.ColorResource { .init(name: "AccentColor", path: [], bundle: bundle) }
  }

  /// This `_R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    let bundle: Foundation.Bundle
    var uiApplicationSceneManifest: uiApplicationSceneManifest { .init(bundle: bundle) }

    func uiApplicationSceneManifest(bundle: Foundation.Bundle) -> uiApplicationSceneManifest {
      .init(bundle: bundle)
    }

    struct uiApplicationSceneManifest {
      let bundle: Foundation.Bundle

      let uiApplicationSupportsMultipleScenes: Bool = false

      var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest"], key: "_key") ?? "UIApplicationSceneManifest" }
    }
  }

  /// This `_R.file` struct is generated, and contains static references to 1 resource files.
  struct file {
    let bundle: Foundation.Bundle

    /// Resource file `CatMeowLottie.json`.
    var catMeowLottieJson: RswiftResources.FileResource { .init(name: "CatMeowLottie", pathExtension: "json", bundle: bundle, locale: LocaleReference.none) }
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var catDetails: catDetails { .init(bundle: bundle) }
    var launchScreen: launchScreen { .init(bundle: bundle) }
    var splashScreen: splashScreen { .init(bundle: bundle) }

    func catDetails(bundle: Foundation.Bundle) -> catDetails {
      .init(bundle: bundle)
    }
    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func splashScreen(bundle: Foundation.Bundle) -> splashScreen {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.catDetails.validate()
      try self.launchScreen.validate()
      try self.splashScreen.validate()
    }


    /// Storyboard `CatDetails`.
    struct catDetails: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = CatDetailsController

      let bundle: Foundation.Bundle

      let name = "CatDetails"

      var catDetailsController: RswiftResources.StoryboardViewControllerIdentifier<CatDetailsController> { .init(identifier: "CatDetailsController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if catDetailsController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'catDetailsController' could not be loaded from storyboard 'CatDetails' as 'CatDetailsController'.") }
      }
    }

    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {

      }
    }

    /// Storyboard `SplashScreen`.
    struct splashScreen: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "SplashScreen"

      var splashScreenController: RswiftResources.StoryboardViewControllerIdentifier<SplashScreenController> { .init(identifier: "SplashScreenController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if splashScreenController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'splashScreenController' could not be loaded from storyboard 'SplashScreen' as 'SplashScreenController'.") }
      }
    }
  }
}